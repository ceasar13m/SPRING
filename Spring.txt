1. Внедрение зависимостей


2. Инверсия управления
Инверсия управления - это паттерн, при котором класс не зависит от других классов. Например, SchoolProject, где есть интерфейс Repository и два класса MySQLRepositoryImpl, InMemorryRepositoryImpl: там у нас классы-сервлеты, которые создают объекты этих двух классов, находятся в слабой зависимости от самих классов, потому что мы используем интерфейс Repository, от которого имплементят те два класса 
Repository repository = new MysqlRepositoryImpl();
Repository repository = new InMemorryRepositoryImpl();.

Без использования этого паттерна не было бы интерфейса, а был бы только класс InMemorryRepositoryImpl, например. И пришлось бы туго, если бы пришлось переходить на SQL. В этом случа схема зависимости выглядело бы так: 

TeacherServlet() ----->  InMemorryRepositoryImpl().

Но мы применили паттерн IoC и схема стала следующей:
---------------------------------------------
[   TeacherServlet() ----->  Repository()    ] <-------  InMemorryRepositoryImpl()
---------------------------------------------

Теперь стрелка зависимости повернулась в противоположную сторону.


3. Модульность, разделение приложения на компоненты
4. Beans
5. Компоненты (Component), отличие от Beans
6. Понятие контекста